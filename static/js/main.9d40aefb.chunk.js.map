{"version":3,"sources":["components/PokemonSearch/PokemonId.js","components/PokemonSearch/PokemonSearchResults.js","components/SearchBar/SearchBar.js","components/PokemonDisplay/PokemonDisplay.js","App.js","serviceWorker.js","index.js"],"names":["PokemonId","name","onSelectPokemon","url","className","onClick","PokemonSearchResults","pokemonQuery","onPokemonSelected","pokemonComponent","map","pokemon","p","key","length","SearchBox","searchChange","type","placeholder","onChange","PokemonDisplay","props","state","pokemonToLookup","prevProps","prevState","newPokemon","this","pokemonSelected","setState","console","log","undefined","React","Component","App","onSearchChange","event","searchfield","target","value","pokemonClicked","pokemonList","pokemonName","fetch","then","response","json","pokemonRetrieved","results","catch","filteredPokemon","filter","toLowerCase","includes","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"uTAaeA,G,OAXG,SAAC,GAAkC,IAAjCC,EAAgC,EAAhCA,KAAWC,GAAqB,EAA1BC,IAA0B,EAArBD,iBAE3B,OAEQ,yBAAKE,UAAU,oBAEP,wBAAIC,QAAS,kBAAMH,EAAgBD,KAAQA,MCwBhDK,G,OA5Bc,SAAC,GAAuC,IAAtCC,EAAqC,EAArCA,aAAcC,EAAuB,EAAvBA,kBAEnCC,EAAmBF,EAAaG,KAAI,SAACC,EAASC,GAAV,OACtC,kBAAC,EAAD,CAAWC,IAAKD,EAAGX,KAAMU,EAAQV,KAAME,IAAKQ,EAAQR,IAAKD,gBAAiBM,OAE9E,OAAgC,IAA5BC,EAAiBK,OAEb,6BACI,iDAMJ,yBAAKV,UAAU,eACNK,KCNNM,EAXG,SAAC,GAAoB,IAAnBC,EAAkB,EAAlBA,aAChB,OACI,yBAAKZ,UAAU,OACX,2BAAOA,UAAU,mCACjBa,KAAK,SACLC,YAAY,uBACZC,SAAUH,MCiCPI,G,yDArCX,WAAYC,GAAQ,IAAD,8BACf,cAAMA,IACDC,MAAQ,CACTC,gBAAiB,IAHN,E,+DAQAC,EAAWC,GAAY,IAAD,OAEjCC,EAAaC,KAAKN,MAAMO,gBACxBF,IAAeF,EAAUI,iBACzBD,KAAKE,SAAS,CAACN,gBAAiBG,IAAa,kBAAKI,QAAQC,IAAI,eAAgBL,EAAY,UAAW,EAAKJ,MAAMC,sB,+BAI9G,IAGFZ,EADGY,EAAmBI,KAAKL,MAAxBC,gBAQP,OALIZ,OADmBqB,GAAnBT,GAAmD,IAAnBA,EACtBA,EAGA,6BAIV,yBAAKnB,UAAU,WAEP,4BAAKO,Q,GA/BIsB,IAAMC,YC6DpBC,E,kDAxDb,aAAe,IAAD,8BACV,gBAgBJC,eAAiB,SAACC,GAChB,EAAKR,SAAS,CAAES,YAAaD,EAAME,OAAOC,SAlB9B,EAsBdhC,kBAAoB,SAACiC,GACnB,EAAKZ,SAAS,CAACD,gBAAiBa,KArB9B,EAAKnB,MAAQ,CACXoB,YAAa,GACbC,YAAa,GACbL,YAAa,GACbV,gBAAiB,IANT,E,gEAWO,IAAD,OAClBgB,MAAM,wDAAwDC,MAAK,SAAAC,GAAQ,OAAGA,EAASC,UACtFF,MAAK,SAAAG,GAAgB,OAAI,EAAKnB,SAAS,CAAEa,YAAaM,EAAiBC,aACvEC,MAAMpB,QAAQC,O,+BAYP,IAAD,EAC0DJ,KAAKL,MAA/DoB,EADA,EACAA,YAA0BJ,GAD1B,EACaK,YADb,EAC0BL,aAAaV,EADvC,EACuCA,gBAC1CuB,EAAkB,GAgBtB,OAfIb,EAAYxB,OAAS,IAIvBqC,EAAkBT,EAAYU,QAAO,SAAAV,GACnC,OAAOA,EAAYzC,KAAKoD,cAAcC,SAAShB,EAAYe,mBAW7D,yBAAKjD,UAAU,OACX,oDACA,kBAAC,EAAD,CAAYY,aAAcW,KAAKS,iBAC/B,kBAAC,EAAD,CAAsB5B,kBAAmBmB,KAAKnB,kBAAmBD,aAAc4C,IAC/E,kBAAC,EAAD,CAAgBvB,gBAAiBA,S,GAlDzBM,aCKEqB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBtB,MAAK,SAAAuB,GACJA,EAAaC,gBAEdnB,OAAM,SAAAoB,GACLxC,QAAQwC,MAAMA,EAAMC,c","file":"static/js/main.9d40aefb.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst PokemonId = ({name, url, onSelectPokemon}) => {\r\n        \r\n    return (\r\n                \r\n            <div className=\"pokemonContainer\">  \r\n                \r\n                    <h2 onClick={() => onSelectPokemon(name)}>{name}</h2>\r\n            </div>\r\n    );\r\n}\r\n\r\nexport default PokemonId;","import React, {Component} from \"react\";\r\nimport PokemonId from './PokemonId';\r\nimport \"./PokemonSearch.css\";\r\n\r\nconst PokemonSearchResults = ({pokemonQuery, onPokemonSelected}) => {\r\n\r\n    const pokemonComponent = pokemonQuery.map((pokemon, p) =>\r\n        <PokemonId key={p} name={pokemon.name} url={pokemon.url} onSelectPokemon={onPokemonSelected}></PokemonId>\r\n    )\r\n    if (pokemonComponent.length === 0) {\r\n        return (\r\n            <div>\r\n                <h4>No pokemon found</h4>\r\n            </div>\r\n        )\r\n    }\r\n    else {\r\n        return (\r\n            <div className=\"pokemonList\">\r\n                    {pokemonComponent}\r\n\r\n            </div>\r\n        );\r\n    }\r\n\r\n    \r\n}\r\n\r\n\r\n\r\n\r\n    \r\nexport default PokemonSearchResults;","import React from 'react';\r\n\r\nconst SearchBox = ({searchChange}) => {\r\n    return (\r\n        <div className='pa2'>\r\n            <input className='pa3 ba b--green bg-lightest-blue' \r\n            type='search' \r\n            placeholder='Enter a Pokemon Name'\r\n            onChange={searchChange} \r\n            />\r\n        </div>\r\n    );\r\n}\r\nexport default SearchBox;","import React from 'react';\r\nimport { render } from '@testing-library/react';\r\n\r\nclass PokemonDisplay extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            pokemonToLookup: ''\r\n        };\r\n\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState) {\r\n\r\n        let newPokemon = this.props.pokemonSelected\r\n        if (newPokemon !== prevProps.pokemonSelected) {\r\n            this.setState({pokemonToLookup: newPokemon}, () =>console.log(\"New Pokemon:\", newPokemon, \"State: \", this.state.pokemonToLookup));\r\n\r\n        }\r\n    }\r\n    render() {\r\n\r\n        const {pokemonToLookup} = this.state;\r\n        let pokemon;\r\n        if (pokemonToLookup != undefined && pokemonToLookup != '') {\r\n            pokemon = pokemonToLookup;\r\n        }\r\n        else {\r\n            pokemon = 'Awaiting Pokemon Selection';\r\n        }\r\n        return (\r\n                \r\n            <div className=\"pokedex\">  \r\n                \r\n                    <h2>{pokemon}</h2>\r\n            </div>\r\n        );\r\n    }\r\n\r\n}\r\n\r\nexport default PokemonDisplay;","import React, { Component } from 'react';\r\nimport './App.css';\r\nimport './components/PokemonSearch/PokemonSearchResults';\r\nimport PokemonSearchResults from './components/PokemonSearch/PokemonSearchResults';\r\nimport SearchBox from './components/SearchBar/SearchBar';\r\nimport PokemonDisplay from './components/PokemonDisplay/PokemonDisplay';\r\n\r\nclass App extends Component{\r\n  constructor() {\r\n      super();\r\n      this.state = {\r\n        pokemonList: [],\r\n        pokemonName: '',\r\n        searchfield: '',\r\n        pokemonSelected: ''\r\n      }\r\n  }\r\n\r\n  //Fetch all of the pokemon to start, no need to paginate\r\n  componentDidMount() {\r\n    fetch('https://pokeapi.co/api/v2/pokemon?limit=1000offset=0').then(response=> response.json())\r\n    .then(pokemonRetrieved => this.setState({ pokemonList: pokemonRetrieved.results}))\r\n    .catch(console.log);        \r\n  }\r\n\r\n  onSearchChange = (event) => {\r\n    this.setState({ searchfield: event.target.value })\r\n    \r\n  }\r\n\r\n  onPokemonSelected = (pokemonClicked) => {\r\n    this.setState({pokemonSelected: pokemonClicked})\r\n  }\r\n\r\n  render() {\r\n    const {pokemonList, pokemonName, searchfield, pokemonSelected} = this.state;\r\n    let filteredPokemon = [];\r\n    if (searchfield.length < 2) {\r\n\r\n    }\r\n    else {\r\n      filteredPokemon = pokemonList.filter(pokemonList =>{\r\n        return pokemonList.name.toLowerCase().includes(searchfield.toLowerCase());\r\n    })\r\n  }\r\n    if (pokemonSelected === '') {\r\n\r\n    }\r\n    else {\r\n      \r\n    }\r\n\r\n    return(\r\n      <div className=\"App\">\r\n          <h1>Search for a Pokemon</h1>\r\n          <SearchBox  searchChange={this.onSearchChange}/>\r\n          <PokemonSearchResults onPokemonSelected={this.onPokemonSelected} pokemonQuery={filteredPokemon} />\r\n          <PokemonDisplay pokemonSelected={pokemonSelected}/>\r\n\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default App;\r\n//export default PokemonFetcher;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}