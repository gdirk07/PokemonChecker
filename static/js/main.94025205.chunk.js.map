{"version":3,"sources":["components/PokemonSearch/PokemonId.tsx","components/PokemonSearch/PokemonSearchResults.tsx","components/SearchBar/SearchBar.tsx","DataTransferObjects/PokemonDTO.ts","components/PokemonDisplay/PokemonDisplay.tsx","App.js","serviceWorker.js","index.js"],"names":["PokemonId","name","url","onSelectPokemon","className","onClick","PokemonSearchResults","pokemonQuery","onPokemonSelected","pokemonComponent","map","pokemon","p","key","length","SearchBox","searchChange","type","placeholder","onChange","PokemonDTO","pokemonConstructorOptions","dexId","type1","type2","moves","frontDefault","frontShiny","this","id","types","sprites","front_default","front_shiny","PokemonDisplay","props","pokemonToDisplay","state","pokemonObject","prevProps","pokemonUrl","fetchPokemonObject","fetch","then","response","json","pokemonRetrieved","createPokemonObject","catch","console","log","setState","pokemonName","displayDefault","displayShiny","src","alt","React","Component","App","onSearchChange","event","searchfield","target","value","pokemonClicked","pokemonSelected","pokemonList","results","filteredPokemon","filter","toLowerCase","includes","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.94025205.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\ntype PokemonIdProps = {\r\n  name: string;\r\n  url: string;\r\n  onSelectPokemon: (name: string, url: string) => {};\r\n};\r\n\r\nconst PokemonId = ({ name, url, onSelectPokemon }: PokemonIdProps) => {\r\n  return (\r\n    <div className=\"pokemonContainer\">\r\n      <h2 onClick={() => onSelectPokemon(name, url)}>{name}</h2>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default PokemonId;\r\n","import React from \"react\";\r\nimport PokemonId from \"./PokemonId\";\r\nimport \"./PokemonSearch.css\";\r\n\r\ninterface PokemonSearchObj {\r\n  name: string;\r\n  url: string;\r\n}\r\n\r\ntype PokemonSearchResultsProps = {\r\n  pokemonQuery: PokemonSearchObj[],\r\n  onPokemonSelected: () => {}\r\n}\r\n\r\nconst PokemonSearchResults = ({pokemonQuery, onPokemonSelected}: PokemonSearchResultsProps) => {\r\n  let pokemonComponent: JSX.Element[] = [];\r\n  if (pokemonQuery) {\r\n    pokemonComponent = pokemonQuery.map((pokemon, p) =>\r\n      <PokemonId key={p} name={pokemon.name} url={pokemon.url} onSelectPokemon={onPokemonSelected}></PokemonId>\r\n    )\r\n  }\r\n  if (pokemonComponent.length === 0) {\r\n    return (\r\n      <div>\r\n          <h4>No pokemon found</h4>\r\n      </div>\r\n    )\r\n  }\r\n  else {\r\n    return (\r\n      <div className=\"pokemonList\">\r\n        {pokemonComponent}\r\n      </div>\r\n    );\r\n  }\r\n}\r\nexport default PokemonSearchResults;\r\n","import React from \"react\";\r\n\r\ntype SearchBoxProps = {\r\n  searchChange: ()=>{}\r\n}\r\n\r\nconst SearchBox = ({ searchChange }: SearchBoxProps) => {\r\n  return (\r\n    <div className=\"pa2\">\r\n      <input\r\n        className=\"pa3 ba b--green bg-lightest-blue\"\r\n        type=\"search\"\r\n        placeholder=\"Enter a Pokemon Name\"\r\n        onChange={searchChange}\r\n      />\r\n    </div>\r\n  );\r\n};\r\nexport default SearchBox;\r\n","type PokemonConstructorOptions = {\r\n  name: string;\r\n  id: number;\r\n  types: { type: { name: string } }[];\r\n  moves: { name: string; url: string }[];\r\n  sprites: { front_shiny: string; front_default: string };\r\n};\r\n\r\n/**\r\n * Pokemon Data Transfer Object\r\n *\r\n * Stores all important information related to a pokemon for in-app retrieval\r\n */\r\nclass PokemonDTO {\r\n  public name: string;\r\n  public dexId: number;\r\n  public type1: string; //TODO: Update this to a TypeDTO object when created\r\n  public type2: string | null;\r\n  public moves:{ name: string; url: string }[]; //TODO: Update this to a moveDTO[] object when created\r\n  public frontDefault: string;\r\n  public frontShiny: string;\r\n\r\n  constructor(pokemonConstructorOptions: PokemonConstructorOptions) {\r\n    this.name = pokemonConstructorOptions.name;\r\n    this.dexId = pokemonConstructorOptions.id;\r\n    this.moves = pokemonConstructorOptions.moves;\r\n    this.type1 = pokemonConstructorOptions.types[0].type.name;\r\n    this.type2 = pokemonConstructorOptions.types[1]\r\n      ? pokemonConstructorOptions.types[1].type.name\r\n      : null;\r\n    this.frontDefault = pokemonConstructorOptions.sprites.front_default;\r\n    this.frontShiny = pokemonConstructorOptions.sprites.front_shiny;\r\n  }\r\n}\r\n\r\nexport default PokemonDTO;\r\n","import React from 'react';\r\nimport PokemonDTO from '../../DataTransferObjects/PokemonDTO';\r\n\r\ntype displayProps = {\r\n  pokemonUrl: string;\r\n};\r\n\r\ntype displayState = {\r\n    pokemonObject: {\r\n        name?: string,\r\n        id?: string,\r\n        moves?: string[],\r\n        type1?: string,\r\n        type2?: string\r\n        sprites?: {\r\n            frontDefault: string\r\n            frontShiny: string\r\n        }\r\n    }\r\n}\r\n\r\nclass PokemonDisplay extends React.Component<displayProps, displayState> {\r\n    private pokemonToDisplay: PokemonDTO | null;\r\n\r\n    constructor(props: displayProps) {\r\n        super(props);\r\n        this.state = {\r\n            pokemonObject: {}\r\n        };\r\n        this.pokemonToDisplay = null;\r\n    }\r\n\r\n  componentDidUpdate(prevProps: displayProps) {\r\n    const prevUrl = prevProps.pokemonUrl;\r\n    const url = this.props.pokemonUrl;\r\n    if (prevUrl !== url) {\r\n      this.fetchPokemonObject();\r\n    }\r\n  }\r\n\r\n  fetchPokemonObject()\r\n  {\r\n    const url = this.props.pokemonUrl;\r\n    if (url && url !== '')\r\n    {\r\n        fetch(url).then(response => response.json())\r\n        .then(pokemonRetrieved => this.createPokemonObject(pokemonRetrieved))\r\n        .catch(console.log); \r\n    }\r\n  }\r\n  /**\r\n   * Create a PokemonObject from the results retrieved\r\n   * @param pokemonRetrieved the pokemon retrieved from the API\r\n   */\r\n  createPokemonObject(pokemonRetrieved: any): void\r\n  {\r\n    this.pokemonToDisplay = new PokemonDTO(pokemonRetrieved)\r\n\r\n    this.setState({ pokemonObject: pokemonRetrieved})\r\n  }\r\n\r\n  render() {\r\n    let pokemon = this.pokemonToDisplay;\r\n    let pokemonName: string | undefined;\r\n    let dexId: string;\r\n    let displayDefault: string | undefined = '';\r\n    let displayShiny: string | undefined = '';\r\n    let type1: string | null;\r\n    let type2: string | null;\r\n\r\n    if (pokemon) {\r\n        pokemonName = pokemon.name;\r\n        dexId = `#${pokemon.dexId}`;\r\n        displayDefault = pokemon.frontDefault;\r\n        displayShiny = pokemon.frontShiny;\r\n        type1 = pokemon.type1;\r\n        type2 = pokemon.type2 ? pokemon.type2 : null;\r\n    }\r\n    else { // as Display gets bigger, this will get messier\r\n        pokemonName = 'Awaiting Pokemon Selection';\r\n        dexId = \"\";\r\n        type1 = \"\";\r\n        type2 = \"\";\r\n    }\r\n    return (\r\n        <div className=\"pokedex\">  \r\n                <h2>{pokemonName}{dexId}</h2>\r\n                <h5>{type1} {type2}</h5>\r\n                {displayDefault ? (<img id=\"pokemonDisplay\" src={displayDefault} alt={pokemonName}></img>) :\r\n                <h2>No Pokemon</h2>} \r\n                {displayShiny ? (<img id=\"pokemonDisplay\" src={displayShiny} alt={pokemonName}></img>) :\r\n                <h2>No Shiny</h2>}\r\n        </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default PokemonDisplay;\r\n","import React, { Component } from \"react\";\r\nimport \"./App.css\";\r\nimport \"./components/PokemonSearch/PokemonSearchResults\";\r\nimport PokemonSearchResults from \"./components/PokemonSearch/PokemonSearchResults\";\r\nimport SearchBox from \"./components/SearchBar/SearchBar\";\r\nimport PokemonDisplay from \"./components/PokemonDisplay/PokemonDisplay\";\r\n\r\nclass App extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      pokemonList: [],\r\n      pokemonName: \"\",\r\n      searchfield: \"\",\r\n      pokemonSelected: \"\",\r\n      pokemonUrl: \"\",\r\n    };\r\n  }\r\n\r\n  //Fetch all of the pokemon to start, no need to paginate\r\n  componentDidMount() {\r\n    fetch(\"https://pokeapi.co/api/v2/pokemon?limit=1000offset=0\")\r\n      .then((response) => response.json())\r\n      .then((pokemonRetrieved) =>\r\n        this.setState({ pokemonList: pokemonRetrieved.results })\r\n      )\r\n      .catch(console.log);\r\n  }\r\n  onSearchChange = (event) => {\r\n    this.setState({ searchfield: event.target.value });\r\n  };\r\n\r\n  onPokemonSelected = (pokemonClicked, url) => {\r\n    if (url && url !== \"\") {\r\n      this.setState({ pokemonSelected: pokemonClicked, pokemonUrl: url });\r\n    }\r\n  };\r\n\r\n  render() {\r\n    const { pokemonList, searchfield, pokemonUrl } = this.state;\r\n    let filteredPokemon = [];\r\n    if (searchfield.length < 2) {\r\n      //do nothing, only really want to start searching when we have at least 2 characters\r\n    } else {\r\n      filteredPokemon = pokemonList.filter((pokemonList) => {\r\n        return pokemonList.name\r\n          .toLowerCase()\r\n          .includes(searchfield.toLowerCase());\r\n      });\r\n    }\r\n    return (\r\n      <div className=\"App\">\r\n        <h1>Search for a Pokemon</h1>\r\n        <SearchBox searchChange={this.onSearchChange} />\r\n        <PokemonSearchResults\r\n          onPokemonSelected={this.onPokemonSelected}\r\n          pokemonQuery={filteredPokemon}\r\n        />\r\n        <PokemonDisplay pokemonUrl={pokemonUrl} />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n//export default PokemonFetcher;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === \"localhost\" ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === \"[::1]\" ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener(\"load\", () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            \"This web app is being served cache-first by a service \" +\r\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then((registration) => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === \"installed\") {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                \"New content is available and will be used when all \" +\r\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log(\"Content is cached for offline use.\");\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch((error) => {\r\n      console.error(\"Error during service worker registration:\", error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { \"Service-Worker\": \"script\" },\r\n  })\r\n    .then((response) => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get(\"content-type\");\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then((registration) => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        \"No internet connection found. App is running in offline mode.\"\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if (\"serviceWorker\" in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then((registration) => {\r\n        registration.unregister();\r\n      })\r\n      .catch((error) => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}