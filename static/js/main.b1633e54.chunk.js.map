{"version":3,"sources":["components/SearchBar.js","App.js","serviceWorker.js","index.js"],"names":["SearchBox","searchChange","className","type","placeholder","onChange","App","onSearchChange","event","setState","searchfield","target","value","state","pokemon","pokemonName","fetch","then","response","json","pokemonRetrieved","results","catch","console","log","this","selectedPokemon","bottomText","name","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"kPAaeA,G,MAXG,SAAC,GAAoB,IAAnBC,EAAkB,EAAlBA,aAChB,OACI,yBAAKC,UAAU,OACX,2BAAOA,UAAU,mCACjBC,KAAK,SACLC,YAAY,qBACZC,SAAUJ,OCqCPK,E,kDAtCb,aAAe,IAAD,8BACV,gBAaJC,eAAiB,SAACC,GAChB,EAAKC,SAAS,CAAEC,YAAaF,EAAMG,OAAOC,SAbxC,EAAKC,MAAQ,CACXC,QAAS,GACTC,YAAa,GACbL,YAAa,IALL,E,gEAQO,IAAD,OAClBM,MAAM,wDAAwDC,MAAK,SAAAC,GAAQ,OAAGA,EAASC,UACtFF,MAAK,SAAAG,GAAgB,OAAI,EAAKX,SAAS,CAAEK,QAASM,EAAiBC,aACnEC,MAAMC,QAAQC,O,+BAQP,IAAD,EACwBC,KAAKZ,MAC9Ba,EAFC,EACAZ,QADA,EACSJ,YAC6B,GACzCiB,EAAa,mDAIjB,OAHID,IACFC,EAAa,4BAAKD,EAAgBE,OAGlC,yBAAK1B,UAAU,OACb,4BAAQA,UAAU,cAChB,6DACA,kBAAC,EAAD,CAAYD,aAAcwB,KAAKlB,iBAC9BoB,Q,GAhCOE,aCMEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBzB,MAAK,SAAA0B,GACJA,EAAaC,gBAEdtB,OAAM,SAAAuB,GACLtB,QAAQsB,MAAMA,EAAMC,a","file":"static/js/main.b1633e54.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst SearchBox = ({searchChange}) => {\r\n    return (\r\n        <div className='pa2'>\r\n            <input className='pa3 ba b--green bg-lightest-blue' \r\n            type='search' \r\n            placeholder='Enter a Pokemon ID'\r\n            onChange={searchChange} \r\n            />\r\n        </div>\r\n    );\r\n}\r\nexport default SearchBox;","import React, { Component } from 'react';\nimport './App.css';\nimport './components/PokemonInfo';\nimport PokemonInfo from './components/PokemonInfo';\nimport SearchBox from './components/SearchBar';\n\nclass App extends Component{\n  constructor() {\n      super();\n      this.state = {\n        pokemon: [],\n        pokemonName: '',\n        searchfield: ''\n      }\n  }\n  componentDidMount() {\n    fetch('https://pokeapi.co/api/v2/pokemon?limit=1000offset=0').then(response=> response.json())\n    .then(pokemonRetrieved => this.setState({ pokemon: pokemonRetrieved.results}))\n    .catch(console.log);        \n  }\n\n  onSearchChange = (event) => {\n    this.setState({ searchfield: event.target.value })\n    \n  }\n\n  render() {\n    const {pokemon, searchfield} = this.state;\n    const selectedPokemon = pokemon[(searchfield-1)];\n    let bottomText = <h4>No Pokemon Selected</h4>;\n    if (selectedPokemon) {\n      bottomText = <h4>{selectedPokemon.name}</h4>;\n    }\n    return(\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <h1>Select a pokemon based off ID</h1>\n          <SearchBox  searchChange={this.onSearchChange}/>\n          {bottomText}\n        </header>\n      </div>\n    )\n  }\n}\n\nexport default App;\n//export default PokemonFetcher;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}