{"version":3,"sources":["components/PokemonSearch/PokemonId.tsx","components/PokemonSearch/PokemonSearchResults.tsx","components/SearchBar/SearchBar.tsx","DataTransferObjects/MoveDTO.ts","DataTransferObjects/PokemonDTO.ts","factories/MoveFactory.ts","constants/Time.ts","factories/PokemonFactory.ts","components/PokemonDisplay/DisplayFunctionalComponents/NameDisplay.tsx","components/PokemonDisplay/DisplayFunctionalComponents/StatDisplay.tsx","components/PokemonDisplay/DisplayFunctionalComponents/TypeDisplay.tsx","components/PokemonDisplay/DisplayFunctionalComponents/PokemonImageDisplay.tsx","components/PokemonDisplay/PokemonQuickCardView.tsx","components/PokemonDisplay/DefaultDisplayView.tsx","components/PokemonDisplay/PokemonDisplay.tsx","repositories/PokemonRepository.ts","services/PokemonService.ts","constants/NameException.ts","utils/NameScrubbingHelper.ts","App.tsx","serviceWorker.js","index.tsx"],"names":["PokemonId","name","url","onSelectPokemon","Box","sx","margin","fontSize","onClick","PokemonSearchResults","pokemonQuery","onPokemonSelected","pokemonComponent","map","pokemon","p","length","display","flexWrap","justifyContent","padding","damageClass","SearchBox","searchChange","className","type","placeholder","onChange","ElementType","pokemonStatIndex","MoveDTO","MoveConstructorOptions","power","accuracy","damage_class","description","this","NULL","MoveFactory","createMoveFromStub","stubData","opts","move","createMoveFromData","moveData","Time","PokemonDTO","pokemonConstructorOptions","dexId","type1","type2","moves","frontDefault","frontShiny","stats","baseStats","s","id","types","sprites","front_default","front_shiny","hp","HP","base_stat","attack","ATK","defense","DEF","spAttack","SPA","spDefense","SPD","speed","SPE","calculateBaseStats","toString","moveEntry","PokemonFactory","moveFactory","getFullPokemonConstructorProps","data","slot","statData","createPokemon","createPokemonStub","dummyType","BUG","back_default","back_female","back_shiny","back_shiny_female","front_female","front_shiny_female","other","versions","convertStubToDTO","dto","newPokemonProps","NameDisplay","StyledTableCell","styled","TableCell","theme","tableCellClasses","body","color","palette","common","white","textAlign","StatDisplay","Table","minWidth","TableBody","TableRow","TypeDisplay","PokemonImage","altImageName","defaultFront","defaultFrontS","src","alt","QuickView","pokemonName","displayDefault","displayDefaultS","Grid","container","alignItems","columnSpacing","item","xs","sm","WaitingView","PokemonDisplay","props","pokemonToDisplay","pokemonFactory","state","pokemonObject","prevProps","pokemonUrl","fetchPokemonObject","getPokemonData","then","pokemonRetrieved","createPokemonObject","catch","console","log","setState","getDisplayStats","displayShiny","Container","maxWidth","React","Component","PokemonRepository","pokemonTable","expiryTimestamp","factory","initTimestamp","oldStamp","Number","localStorage","getItem","storageTimestampKey","minutes","newStamp","Date","now","MILLISECONDS_PER_SECOND","SECONDS_PER_MINUTE","setItem","Object","keys","key","payload","forEach","setPokemonData","JSON","stringify","savedData","oldTable","parse","pokemonData","PokemonService","getAllUrl","repository","resolvePokemonStubs","response","a","json","results","filterResults","filter","substring","split","pop","storePokemonStubs","loadPokemonBatch","savePokemon","setExpiryTimestamp","e","Error","message","isExpired","fetch","loadFromStorage","Promise","resolve","getAllPokemon","HYPHEN_IN_NAME","PERIOD_IN_NAME","GENDER_IN_NAME","APOSTAPHE_IN_NAME","DIACRITIC_IN_NAME","COLON_IN_NAME","pokemonNameCapitalizer","hyphen","charAt","toUpperCase","slice","App","pokeService","onSearchChange","event","target","value","searchfield","pokemonClicked","pokemonSelected","pokemonList","toLowerCase","includes","find","element","filteredPokemon","getPokemon","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error"],"mappings":"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","file":"static/js/main.61872ef9.chunk.js","sourcesContent":["import Box from \"@mui/system/box\";\r\n\r\ntype PokemonIdProps = {\r\n  name: string;\r\n  url: string;\r\n  onSelectPokemon: (name: string, url: string) => void;\r\n};\r\n\r\nconst PokemonId = ({ name, url, onSelectPokemon }: PokemonIdProps) => {\r\n  return (\r\n    <Box sx= {{ margin: '5px', fontSize: '10px' }}>\r\n      <h2 onClick={() => onSelectPokemon(name, url)}>{name}</h2>\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default PokemonId;\r\n","import PokemonId from \"./PokemonId\";\r\nimport Box from \"@mui/system/Box\";\r\n\r\nexport type PokemonSearchObj = {\r\n  name: string,\r\n  url: string,\r\n}\r\n\r\nexport type PokemonSearchResultsProps = {\r\n  pokemonQuery: PokemonSearchObj[],\r\n  onPokemonSelected: (name: string, url: string) => void\r\n}\r\n\r\nexport default function PokemonSearchResults ({pokemonQuery, onPokemonSelected}: PokemonSearchResultsProps) {\r\n  let pokemonComponent: JSX.Element[] = [];\r\n  if (pokemonQuery) {\r\n    pokemonComponent = pokemonQuery.map((pokemon, p) =>\r\n      <PokemonId key={p} name={pokemon.name} url={pokemon.url} onSelectPokemon={onPokemonSelected}></PokemonId>\r\n    )\r\n  }\r\n  if (pokemonComponent.length === 0) {\r\n    return (\r\n        <div>\r\n            <h4>No pokemon found</h4>\r\n        </div>\r\n    )\r\n  }\r\n  else {\r\n    return (\r\n      <Box sx={\r\n        { \r\n          display: 'flex', \r\n          flexWrap: 'wrap', \r\n          justifyContent: 'center', \r\n          padding: '5px' }\r\n        }>\r\n        {pokemonComponent}\r\n      </Box>\r\n    );\r\n  }\r\n}","import React from \"react\";\r\n\r\ntype SearchBoxProps = {\r\n  searchChange: (event: React.ChangeEvent<HTMLInputElement>) => void;\r\n};\r\n\r\nconst SearchBox = ({ searchChange }: SearchBoxProps) => {\r\n  return (\r\n    <div className=\"pa2\">\r\n      <input\r\n        className=\"pa3 ba b--green bg-lightest-blue\"\r\n        type=\"search\"\r\n        placeholder=\"Enter a Pokemon Name\"\r\n        onChange={searchChange}\r\n      />\r\n    </div>\r\n  );\r\n};\r\nexport default SearchBox;\r\n","export enum damageClass {\r\n  PHYSICAL = \"physical\",\r\n  SPECIAL = \"special\",\r\n  STATUS = \"status\",\r\n  NULL = \"null\",\r\n}\r\n\r\nexport type MoveConstructorOptions = {\r\n  name: string;\r\n  power?: number;\r\n  accuracy?: number;\r\n  damage_class?: damageClass;\r\n  description?: string;\r\n  url?: string;\r\n};\r\n\r\nexport class MoveDTO {\r\n  //TODO: Add a property for move use number (PP)\r\n  public name: string;\r\n  public power: number;\r\n  public accuracy: number;\r\n  public damage_class: damageClass;\r\n  public description: string;\r\n  public url: string;\r\n\r\n  constructor(MoveConstructorOptions: MoveConstructorOptions) {\r\n    this.name = MoveConstructorOptions.name;\r\n    this.power = MoveConstructorOptions.power ?? -1;\r\n    this.accuracy = MoveConstructorOptions.accuracy ?? -1;\r\n    this.damage_class = MoveConstructorOptions.damage_class ?? damageClass.NULL;\r\n    this.description = MoveConstructorOptions.description ?? \"\";\r\n    this.url = MoveConstructorOptions.url ?? \"\";\r\n  }\r\n}\r\nexport default MoveDTO;\r\n","import { MoveDTO } from \"./MoveDTO\";\r\nimport { ITypeData, ISpriteData } from \"../interfaces/PokemonData\";\r\n\r\nexport type PokemonConstructorOptions = {\r\n  name: string;\r\n  id: number;\r\n  types: ITypeData[];\r\n  moves: MoveDTO[];\r\n  sprites: ISpriteData;\r\n  stats: {\r\n    base_stat: number;\r\n  }[];\r\n  url?: string;\r\n};\r\n\r\nexport type pokemonDisplayObj = {\r\n  name?: string;\r\n  id?: string;\r\n  moves?: string[];\r\n  type1?: string;\r\n  type2?: string | null;\r\n  sprites?: {\r\n    frontDefault: string;\r\n    frontShiny: string;\r\n  };\r\n};\r\n\r\nexport enum ElementType {\r\n  BUG = \"bug\",\r\n  DARK = \"dark\",\r\n  DRAGON = \"dragon\",\r\n  ELECTRIC = \"electric\",\r\n  FAIRY = \"fairy\",\r\n  FIGHTING = \"fighting\",\r\n  FIRE = \"fire\",\r\n  FLYING = \"flying\",\r\n  GHOST = \"ghost\",\r\n  GRASS = \"grass\",\r\n  GROUND = \"ground\",\r\n  ICE = \"ice\",\r\n  NORMAL = \"normal\",\r\n  POISON = \"poison\",\r\n  PSYCHIC = \"psychic\",\r\n  ROCK = \"rock\",\r\n  STEEL = \"steel\",\r\n  WATER = \"water\",\r\n}\r\n\r\n/**\r\n * Pokemon stat data is (currently) sent in an array where\r\n * stat indices are consistent with this enum\r\n */\r\nenum pokemonStatIndex {\r\n  HP,\r\n  ATK,\r\n  DEF,\r\n  SPA,\r\n  SPD,\r\n  SPE,\r\n}\r\n\r\n/**\r\n * Pokemon Data Transfer Object\r\n *\r\n * Stores all important information related to a pokemon for in-app retrieval\r\n */\r\nclass PokemonDTO {\r\n  public name: string;\r\n  public dexId: number;\r\n  public type1: string; //TODO: Update this to a TypeDTO object when created\r\n  public type2: string | null;\r\n  public moves: MoveDTO[];\r\n  public frontDefault: string;\r\n  public frontShiny: string;\r\n  public stats: {\r\n    hp: number;\r\n    attack: number;\r\n    defense: number;\r\n    spAttack: number;\r\n    spDefense: number;\r\n    speed: number;\r\n  };\r\n  public baseStats: number; //A cumulation of the values of the 6 stats\r\n  public url: string;\r\n\r\n  constructor(pokemonConstructorOptions: PokemonConstructorOptions) {\r\n    const stats = pokemonConstructorOptions.stats;\r\n    const s = pokemonStatIndex;\r\n\r\n    this.name = pokemonConstructorOptions.name;\r\n    this.dexId = pokemonConstructorOptions.id;\r\n    this.moves = pokemonConstructorOptions.moves;\r\n    this.type1 = pokemonConstructorOptions.types[0].name ?? \"\";\r\n    this.type2 = pokemonConstructorOptions.types[1]\r\n      ? pokemonConstructorOptions.types[1].name\r\n      : null;\r\n    this.frontDefault = pokemonConstructorOptions.sprites.front_default;\r\n    this.frontShiny = pokemonConstructorOptions.sprites.front_shiny;\r\n    this.url = pokemonConstructorOptions.url ?? \"\";\r\n\r\n    // ! Current stat generation relies on the consistency of the API\r\n    this.stats = {\r\n      hp: stats[s.HP].base_stat,\r\n      attack: stats[s.ATK].base_stat,\r\n      defense: stats[s.DEF].base_stat,\r\n      spAttack: stats[s.SPA].base_stat,\r\n      spDefense: stats[s.SPD].base_stat,\r\n      speed: stats[s.SPE].base_stat,\r\n    };\r\n    this.baseStats = this.calculateBaseStats();\r\n  }\r\n\r\n  /**\r\n   * Returns Pokemon data in consumable form (strings) for a calling view.\r\n   */\r\n  public getDisplayStats(): pokemonDisplayObj {\r\n    return {\r\n      name: this.name,\r\n      id: this.dexId.toString(),\r\n      moves: this.moves.map((moveEntry) => moveEntry.name),\r\n      type1: this.type1,\r\n      type2: this.type2,\r\n      sprites: {\r\n        frontDefault: this.frontDefault,\r\n        frontShiny: this.frontShiny,\r\n      },\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Determines whether this PokemonDTO is suitable for rendering\r\n   */\r\n  public get hasFullData(): boolean {\r\n    return (\r\n      this.name.length > 0 &&\r\n      this.dexId > 0 &&\r\n      this.moves.length > 0 &&\r\n      this.frontDefault.length > 0 &&\r\n      this.frontShiny.length > 0\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Flag showing if this DTO has the URL for its full data\r\n   */\r\n  public get hasUrl(): boolean {\r\n    return this.url.length > 0;\r\n  }\r\n\r\n  /**\r\n   * Calculates the 'base stat total' (BST) for this Pokemon.\r\n   */\r\n  private calculateBaseStats(): number {\r\n    if (this.stats) {\r\n      const s = this.stats;\r\n      return s.hp + s.attack + s.defense + s.spAttack + s.spDefense + s.speed;\r\n    }\r\n    return 0;\r\n  }\r\n}\r\n\r\nexport default PokemonDTO;\r\n","import { IMoveSummary, IMoveData } from \"../interfaces/PokemonData\";\r\nimport {\r\n  MoveConstructorOptions,\r\n  MoveDTO,\r\n} from \"../DataTransferObjects/MoveDTO\";\r\n\r\nexport class MoveFactory {\r\n  public createMoveFromStub = (stubData: IMoveSummary): MoveDTO => {\r\n    const opts: MoveConstructorOptions = {\r\n      name: stubData.move.name,\r\n      url: stubData.move.url,\r\n    };\r\n\r\n    return new MoveDTO(opts);\r\n  };\r\n\r\n  public createMoveFromData = (moveData: IMoveData): MoveDTO => {\r\n    const opts: MoveConstructorOptions = {\r\n      name: moveData.name,\r\n      power: moveData.power,\r\n      accuracy: moveData.accuracy,\r\n      damage_class: moveData.damage_class,\r\n      description: moveData.description,\r\n      url: moveData.url,\r\n    };\r\n\r\n    return new MoveDTO(opts);\r\n  };\r\n}\r\n","/**\r\n * Constants for measureing time and calculating timestamps\r\n */\r\nexport const enum Time {\r\n  MILLISECONDS_PER_SECOND = 1000,\r\n  SECONDS_PER_MINUTE = 60,\r\n  MINUTES_PER_HOUR = 60,\r\n}","import { MoveFactory } from \"./MoveFactory\";\r\nimport PokemonDTO, {\r\n  ElementType,\r\n  PokemonConstructorOptions,\r\n} from \"../DataTransferObjects/PokemonDTO\";\r\nimport {\r\n  IPokemonData,\r\n  IPokemonStub,\r\n  ITypeData,\r\n} from \"../interfaces/PokemonData\";\r\n\r\nexport class PokemonFactory {\r\n  private moveFactory: MoveFactory;\r\n\r\n  constructor() {\r\n    this.moveFactory = new MoveFactory();\r\n  }\r\n\r\n  private getFullPokemonConstructorProps = (\r\n    data: IPokemonData\r\n  ): PokemonConstructorOptions => {\r\n    return {\r\n      name: data.name,\r\n      id: data.id,\r\n      types: data.types.map((slot) => slot.type),\r\n      moves: data.moves.map((moveData) =>\r\n        this.moveFactory.createMoveFromStub(moveData)\r\n      ),\r\n      sprites: data.sprites,\r\n      stats: data.stats.map((statData) => ({\r\n        base_stat: statData.base_stat,\r\n      })),\r\n    };\r\n  };\r\n\r\n  /**\r\n   * Creates pokemon data that can be used for rendering\r\n   * @param pokemon Full data from the individual pokemon requests\r\n   */\r\n  public createPokemon = (pokemon: IPokemonData): PokemonDTO => {\r\n    return new PokemonDTO(this.getFullPokemonConstructorProps(pokemon));\r\n  };\r\n\r\n  /**\r\n   * Creates a partial pokemon DTO\r\n   * @param pokemon Partial stub data from the summary call\r\n   */\r\n  public createPokemonStub = (pokemon: IPokemonStub): PokemonDTO => {\r\n    // TODO: Introduce a null-type element\r\n    const dummyType: ITypeData = {\r\n      name: ElementType.BUG,\r\n      url: \"https://pokeapi.co/api/v2/type/7/\",\r\n    };\r\n    const opts: PokemonConstructorOptions = {\r\n      name: pokemon.name,\r\n      id: -1,\r\n      types: [dummyType],\r\n      sprites: {\r\n        back_default: null,\r\n        back_female: null,\r\n        back_shiny: null,\r\n        back_shiny_female: null,\r\n        front_default: \"\",\r\n        front_female: null,\r\n        front_shiny: \"\",\r\n        front_shiny_female: null,\r\n        other: {},\r\n        versions: {},\r\n      },\r\n      moves: [],\r\n      stats: [\r\n        { base_stat: 0},\r\n        { base_stat: 0},\r\n        { base_stat: 0},\r\n        { base_stat: 0},\r\n        { base_stat: 0},\r\n        { base_stat: 0},\r\n      ],\r\n      url: pokemon.url,\r\n    };\r\n    return new PokemonDTO(opts);\r\n  };\r\n\r\n  /**\r\n   * Converts a partial DTO with only the URL to a full object\r\n   */\r\n  public convertStubToDTO = (\r\n    dto: PokemonDTO,\r\n    data: IPokemonData\r\n  ): PokemonDTO => {\r\n    const newPokemonProps: PokemonConstructorOptions = {\r\n      ...this.getFullPokemonConstructorProps(data),\r\n      url: dto.url,\r\n    };\r\n    return new PokemonDTO(newPokemonProps);\r\n  };\r\n}\r\n","type pokemonNameAndId = {\r\n  name: string,\r\n  id: string\r\n};\r\n\r\nexport const NameDisplay = ({ name, id }: pokemonNameAndId) => {\r\n  return (\r\n    <div id=\"PokemonName\">\r\n      <h5>\r\n        {name} {id}\r\n      </h5>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default NameDisplay;","import { styled } from \"@mui/material/styles\";\r\nimport { Table, TableBody, TableCell, TableRow, tableCellClasses } from \"@mui/material\";\r\n\r\nconst StyledTableCell = styled(TableCell)(({ theme }) => ({\r\n  [`&.${tableCellClasses.body}`]: {\r\n    color: theme.palette.common.white,\r\n    fontSize: 14,\r\n    textAlign: \"center\"\r\n  },\r\n}));\r\n\r\ntype pokemonStats = {\r\n  baseStats: string\r\n  stats: {\r\n    hp: number;\r\n    attack: number;\r\n    defense: number;\r\n    spAttack: number;\r\n    spDefense: number;\r\n    speed: number;\r\n  } | null\r\n};\r\n\r\nexport const StatDisplay = ({ baseStats, stats }: pokemonStats) => {\r\n  return (\r\n    <div id=\"PokemonBaseStats\">\r\n      <h5>\r\n        {baseStats}\r\n      </h5>\r\n      <Table sx={{ minWidth: 300 }} aria-label=\"stat table\" color=\"white\">\r\n        <TableBody>\r\n          <TableRow>\r\n            <StyledTableCell>HP</StyledTableCell>\r\n            <StyledTableCell>{stats?.hp}</StyledTableCell>\r\n          </TableRow>\r\n          <TableRow>\r\n            <StyledTableCell>Attack</StyledTableCell>\r\n            <StyledTableCell>{stats?.attack}</StyledTableCell>\r\n          </TableRow>\r\n          <TableRow>\r\n            <StyledTableCell>Defense</StyledTableCell>\r\n            <StyledTableCell>{stats?.defense}</StyledTableCell>\r\n          </TableRow>\r\n          <TableRow>\r\n            <StyledTableCell>Special Attack</StyledTableCell>\r\n            <StyledTableCell>{stats?.spAttack}</StyledTableCell>\r\n          </TableRow>\r\n          <TableRow>\r\n            <StyledTableCell>Special Defense</StyledTableCell>\r\n            <StyledTableCell>{stats?.spDefense}</StyledTableCell>\r\n          </TableRow>\r\n          <TableRow>\r\n            <StyledTableCell>Speed</StyledTableCell>\r\n            <StyledTableCell>{stats?.speed}</StyledTableCell>\r\n          </TableRow>\r\n        </TableBody>\r\n      </Table>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default StatDisplay;","type pokemonTypes = {\r\n  type1: string,\r\n  type2: string | null\r\n};\r\n\r\nexport const TypeDisplay  = ({type1, type2}: pokemonTypes) => {\r\n  return (\r\n    <div id=\"PokemonTypes\">\r\n      <h5>\r\n        {type1} {type2}\r\n      </h5>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TypeDisplay;","/**\r\n * functional component for displaying images pertaining to the pokemon.\r\n * Note: For naming conventions, adding a capital \"S\" denotes a shiny varient\r\n * of the image\r\n */\r\n\r\ntype PokemonImageProps = {\r\n  altImageName: string,\r\n  defaultFront: string,\r\n  defaultFrontS: string\r\n};\r\n\r\nexport const PokemonImage = ({\r\n  altImageName,\r\n  defaultFront,\r\n  defaultFrontS\r\n}: PokemonImageProps) => {\r\n  return (\r\n    <div>\r\n      {\r\n        <img id=\"pokemonDisplay\" src={defaultFront} alt={altImageName}></img>\r\n      }\r\n      {defaultFrontS ? (\r\n        <img id=\"pokemonDisplay\" src={defaultFrontS} alt={altImageName}></img>\r\n      ) : (\r\n        //Pokemon should have a shiny, if not then we should log the error\r\n        <h2>No Shiny</h2>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default PokemonImage","import NameDisplay from \"./DisplayFunctionalComponents/NameDisplay\";\r\nimport StatDisplay from \"./DisplayFunctionalComponents/StatDisplay\";\r\nimport TypeDisplay from \"./DisplayFunctionalComponents/TypeDisplay\";\r\nimport PokemonImage from \"./DisplayFunctionalComponents/PokemonImageDisplay\";\r\nimport Grid from \"@mui/material/Grid\";\r\n\r\ntype PokemonInfoProps = {\r\n  pokemonName: string,\r\n  dexId: string,\r\n  baseStats: string,\r\n  stats: {\r\n    hp: number;\r\n    attack: number;\r\n    defense: number;\r\n    spAttack: number;\r\n    spDefense: number;\r\n    speed: number;\r\n  } | null,\r\n  type1: string,\r\n  type2: string | null,\r\n  displayDefault: string,\r\n  displayDefaultS: string\r\n};\r\n\r\nexport const QuickView =  (\r\n  {\r\n    pokemonName, \r\n    dexId, \r\n    baseStats,\r\n    stats,\r\n    type1, \r\n    type2, \r\n    displayDefault, \r\n    displayDefaultS\r\n  }: PokemonInfoProps\r\n) => {\r\n\r\n  return (\r\n    <Grid container alignItems=\"center\" columnSpacing={0}>\r\n      <Grid item xs={12} sm={7}>\r\n        <PokemonImage\r\n          altImageName = {pokemonName}\r\n          defaultFront = {displayDefault}\r\n          defaultFrontS = {displayDefaultS}\r\n        />\r\n      </Grid>\r\n      <Grid item xs={12} sm>\r\n        <TypeDisplay\r\n          type1 = {type1}\r\n          type2 = {type2}\r\n        />\r\n        <NameDisplay\r\n            name = {pokemonName}\r\n            id = {dexId}\r\n          />\r\n      </Grid>\r\n      <Grid item xs={12}>\r\n        <StatDisplay\r\n          baseStats = {baseStats}\r\n          stats = {stats}\r\n        />\r\n      </Grid>\r\n    </Grid>\r\n  );\r\n};\r\n\r\nexport default QuickView;\r\n","export const WaitingView = () => {\r\n  return (\r\n    <div>\r\n       <h2>Waiting for Pokemon selection</h2>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default WaitingView;","import React from \"react\";\r\nimport PokemonDTO from \"../../DataTransferObjects/PokemonDTO\";\r\nimport { IPokemonData } from \"../../interfaces/PokemonData\";\r\nimport { PokemonFactory } from \"../../factories/PokemonFactory\";\r\nimport { QuickView } from \"./PokemonQuickCardView\";\r\nimport \"../../App.css\";\r\nimport WaitingView from \"./DefaultDisplayView\";\r\nimport Container from \"@mui/material/Container\";\r\n\r\ntype displayProps = {\r\n  pokemonUrl: string;\r\n  getPokemonData: (url: string) => Promise<any>;\r\n};\r\n\r\ntype displayState = {\r\n  pokemonObject: {\r\n    name?: string;\r\n    id?: string;\r\n    moves?: string[];\r\n    type1?: string;\r\n    type2?: string | null;\r\n    sprites?: {\r\n      frontDefault: string;\r\n      frontShiny: string;\r\n    };\r\n  };\r\n};\r\n\r\nclass PokemonDisplay extends React.Component<displayProps, displayState> {\r\n  private pokemonToDisplay: PokemonDTO | null;\r\n  //TODO (jeremy): Move this factory to a service! Views shouldn't control this.\r\n  private pokemonFactory: PokemonFactory;\r\n\r\n  constructor(props: displayProps) {\r\n    super(props);\r\n    this.state = {\r\n      pokemonObject: {},\r\n    };\r\n    this.pokemonToDisplay = null;\r\n    this.pokemonFactory = new PokemonFactory();\r\n  }\r\n\r\n  componentDidUpdate(prevProps: displayProps) {\r\n    const prevUrl = prevProps.pokemonUrl;\r\n    const url = this.props.pokemonUrl;\r\n    if (prevUrl !== url) {\r\n      this.fetchPokemonObject();\r\n    }\r\n  }\r\n\r\n  fetchPokemonObject() {\r\n    const url = this.props.pokemonUrl;\r\n    if (url && url !== \"\") {\r\n      this.props.getPokemonData(url)\r\n        .then((pokemonRetrieved) => this.createPokemonObject(pokemonRetrieved))\r\n        .catch(console.log);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Create a PokemonObject from the results retrieved\r\n   * @param pokemonRetrieved the pokemon retrieved from the API\r\n   */\r\n  createPokemonObject(pokemonRetrieved: IPokemonData): void {\r\n    this.pokemonToDisplay = this.pokemonFactory.createPokemon(pokemonRetrieved);\r\n    this.setState({ pokemonObject: this.pokemonToDisplay.getDisplayStats() });\r\n  }\r\n\r\n  render() {\r\n    let pokemon = this.pokemonToDisplay;\r\n    let pokemonName: string | undefined;\r\n    let dexId: string;\r\n    let displayDefault: string | undefined = \"\";\r\n    let displayShiny: string | undefined = \"\";\r\n    let type1: string | null;\r\n    let type2: string | null;\r\n    let stats: {\r\n      hp: number;\r\n      attack: number;\r\n      defense: number;\r\n      spAttack: number;\r\n      spDefense: number;\r\n      speed: number;\r\n    } | null;\r\n    let baseStats: string;\r\n\r\n    if (pokemon) {\r\n      pokemonName = pokemon.name;\r\n      dexId = `#${pokemon.dexId}`;\r\n      displayDefault = pokemon.frontDefault;\r\n      displayShiny = pokemon.frontShiny;\r\n      type1 = pokemon.type1;\r\n      type2 = pokemon.type2 ? pokemon.type2 : null;\r\n      stats = pokemon.stats;\r\n      baseStats = \"Total base stats: \" + pokemon.baseStats.toString();\r\n\r\n      return (\r\n        <Container maxWidth=\"sm\">\r\n          <QuickView\r\n            pokemonName = {pokemonName} \r\n            dexId = {dexId} \r\n            baseStats = {baseStats}\r\n            stats = {stats}\r\n            type1 = {type1} \r\n            type2 = {type2} \r\n            displayDefault = {displayDefault} \r\n            displayDefaultS = {displayShiny}\r\n          />\r\n        </Container>\r\n      );\r\n    } else {\r\n      // as Display gets bigger, this will get messier\r\n      pokemonName = \"Awaiting Pokemon Selection\";\r\n      dexId = \"\";\r\n      displayDefault = \"\";\r\n      displayShiny = \"\";\r\n      type1 = \"\";\r\n      type2 = \"\";\r\n      stats = null;\r\n      baseStats = \"\";\r\n\r\n      return (\r\n        <div className=\"AwaitingPokemon\">\r\n          <WaitingView />\r\n        </div>\r\n      );\r\n    }\r\n  }\r\n}\r\n\r\nexport default PokemonDisplay;\r\n","import PokemonDTO from \"../DataTransferObjects/PokemonDTO\";\r\nimport { Time } from \"../constants/Time\";\r\nimport { PokemonFactory } from \"../factories/PokemonFactory\";\r\n\r\nexport class PokemonRepository {\r\n  private pokemonTable: Record<string, PokemonDTO>;\r\n  private expiryTimestamp: number;\r\n  private factory: PokemonFactory\r\n\r\n  // Used to check against localStorage\r\n  private static storageTimestampKey = \"expiryTimestamp\";\r\n\r\n  constructor() {\r\n    this.pokemonTable = {};\r\n    this.factory = new PokemonFactory();\r\n    this.expiryTimestamp = this.initTimestamp();\r\n  }\r\n\r\n  /**\r\n   * Returns the existing timestamp from localStorage, if it exists.\r\n   * Zero indicates that localStorage is un-set\r\n   */\r\n  public initTimestamp(): number {\r\n    const oldStamp = Number(\r\n      localStorage.getItem(PokemonRepository.storageTimestampKey)\r\n    );\r\n    return oldStamp ?? 0;\r\n  }\r\n\r\n  /**\r\n   * Sets a time for which the repository data will become stale.\r\n   * @param minutes Duration to set the repository expiry time.\r\n   */\r\n  public setExpiryTimestamp(minutes = 60): void {\r\n    const newStamp =\r\n      Date.now() +\r\n      minutes * Time.MILLISECONDS_PER_SECOND * Time.SECONDS_PER_MINUTE;\r\n\r\n    localStorage.setItem(\r\n      PokemonRepository.storageTimestampKey,\r\n      newStamp.toString()\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Determines whether the expiry timestamp has passed\r\n   */\r\n  public get isExpired(): boolean {\r\n    return this.expiryTimestamp < Date.now();\r\n  }\r\n\r\n  /**\r\n   * Assigns a full pokemon data payload to the repository\r\n   * @param data Pokemon to write to repository\r\n   */\r\n  public setPokemonData(data: PokemonDTO): void {\r\n    this.pokemonTable[data.name] = data;\r\n  }\r\n\r\n  /**\r\n   * Retrieves a full pokemon payload, if applicable\r\n   * @param name Name of the Pokemon to be retrieved\r\n   */\r\n  public getPokemonData(name: string): PokemonDTO | null {\r\n    return this.pokemonTable[name] ?? null;\r\n  }\r\n\r\n  /**\r\n   * Fetches the full extent of stored Pokemon data in the repository.\r\n   */\r\n  public getAllPokemon(): PokemonDTO[] {\r\n    return (\r\n      Object.keys(this.pokemonTable).map((key) => this.pokemonTable[key]) ?? []\r\n    );\r\n  }\r\n\r\n  public loadPokemonBatch(payload: PokemonDTO[]): void {\r\n    payload.forEach(pokemon => this.setPokemonData(pokemon));\r\n  }\r\n\r\n  /**\r\n   * Saves the state of the current table to localStorage\r\n   */\r\n  public savePokemon(): void {\r\n    localStorage.setItem('pokemonTable', JSON.stringify(this.pokemonTable));\r\n  }\r\n\r\n  public loadFromStorage(): void {\r\n    const savedData = localStorage.getItem('pokemonTable');\r\n    if (savedData) {\r\n      const oldTable = JSON.parse(savedData);\r\n      (Object.keys(oldTable)).forEach(key => {\r\n        const pokemonData = this.factory.createPokemonStub(oldTable[key]);\r\n        this.setPokemonData(pokemonData);\r\n      });\r\n    }\r\n  }\r\n}\r\n","import { PokemonRepository } from \"../repositories/PokemonRepository\";\r\nimport { PokemonFactory } from \"../factories/PokemonFactory\";\r\nimport PokemonDTO from \"../DataTransferObjects/PokemonDTO\";\r\n\r\n/**\r\n * Service for handling fetches related to Pokemon, from\r\n * name/url stubs to full Pokemon DTO data.\r\n */\r\nexport class PokemonService {\r\n  private getAllUrl: string;\r\n  private factory: PokemonFactory;\r\n  private repository: PokemonRepository;\r\n\r\n  constructor() {\r\n    this.getAllUrl = \"https://pokeapi.co/api/v2/pokemon?limit=1000offset=0\";\r\n    this.repository = new PokemonRepository();\r\n    this.factory = new PokemonFactory();\r\n  }\r\n\r\n  /**\r\n   * Fills the repository with skeleton DTOs and URLs,\r\n   * assigning a timestamp in the process.\r\n   * @param payload List of pokemon to store in the repository\r\n   */\r\n  private storePokemonStubs(payload: PokemonDTO[]): void {\r\n    try{\r\n      // Save the pokemon data to localStorage\r\n      this.repository.loadPokemonBatch(payload);\r\n      this.repository.savePokemon();\r\n\r\n      // Set the timestamp for 30 minutes\r\n      this.repository.setExpiryTimestamp(30);\r\n    }\r\n    catch (e: unknown) {\r\n      if (typeof e === 'string') {\r\n        console.log(`Could not store pokemon stubs: ${e}`);\r\n      }\r\n      else if (e instanceof Error) {\r\n        console.log(`Failed to store pokemon stub: ${e.message}`);\r\n      }\r\n      else {\r\n        console.log(`Unknown error storing pokemon stubs: ${e}`);\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Catches returned key-value pairs of pokemon names from the API\r\n   * @param response Returned payload from fetching pokemon names\r\n   */\r\n  private resolvePokemonStubs = async (\r\n    response: Response\r\n  ): Promise<PokemonDTO[]> => {\r\n    const data = await response.json();\r\n    const results = data.results;\r\n    //the query fetches all pokemon AND forms (megas etc), but we don't want\r\n    //forms so filter out any result that has a url > 10000\r\n    const filterResults = results.filter(\r\n      (filter: { name: string; url: string }) => {\r\n        //cut the final \"/\" out\r\n        const url = filter.url.substring(0, filter.url.length - 1).split(\"/\");\r\n\r\n        const id = Number(url.pop());\r\n        if (id && id < 10000) return this.factory.createPokemonStub(filter);\r\n        return false;\r\n      }\r\n    );\r\n    // Store the pokemon names in the repository\r\n    this.storePokemonStubs(filterResults);\r\n\r\n    // console.log(filterResults);\r\n\r\n    return filterResults;\r\n  };\r\n\r\n  /**\r\n   * Search ALL pokemon with their name and individual url\r\n   * @TODO We ought to fix what the pokemonList in App.tsx consumes.\r\n   */\r\n  public async getAllPokemon(): Promise<PokemonDTO[]> {\r\n    if (this.repository.isExpired) {\r\n      return await fetch(this.getAllUrl).then(this.resolvePokemonStubs);\r\n    }\r\n    else {\r\n      this.repository.loadFromStorage();\r\n      return Promise.resolve(this.repository.getAllPokemon());\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Lookup an individual pokemon\r\n   * @param url the url for the specific pokemon\r\n   */\r\n  public getPokemon(url: string): Promise<any> {\r\n    return fetch(url).then((response) => response.json());\r\n  }\r\n}\r\n","/**\r\n * Utility file to store hardcoded names that contain special characters that\r\n * we want to scrub but will affect other pokemon.\r\n */\r\n\r\nexport const HYPHEN_IN_NAME: string[] \r\n  = [\"ho-oh\", \"porygon-z\", \"jangmo-o\", \"hakamo-o\", \"kommo-o\"];\r\n\r\nexport const PERIOD_IN_NAME: { [key: string]: string} = {\r\n  \"mr-mime\": \"Mr. Mime\", \r\n  \"mime-jr\": \"Mime Jr.\", \r\n  \"mr-rime\": \"Mr. Rime\"\r\n};\r\n\r\nexport const GENDER_IN_NAME: { [key: string]: string} = {\r\n  \"nidoran-m\": \"Nidoran♂\",\r\n  \"nidoran-f\": \"Nidoran♀\"\r\n};\r\n\r\nexport const APOSTAPHE_IN_NAME: { [key: string]: string} = {\r\n  \"farfetchd\": \"Farfetch'd\",\r\n  \"sirfetchd\": \"Sirfetch'd\"\r\n};\r\n\r\nexport const DIACRITIC_IN_NAME: { [key: string]: string} = {\r\n  \"flabebe\": \"Flabébé\"\r\n};\r\n\r\nexport const COLON_IN_NAME: { [key: string]: string} = {\r\n  \"type-null\": \"Type: Null\"\r\n};\r\n","import { HYPHEN_IN_NAME, PERIOD_IN_NAME, GENDER_IN_NAME, \r\n  APOSTAPHE_IN_NAME, DIACRITIC_IN_NAME, COLON_IN_NAME \r\n} from \"../constants/NameException\";\r\n\r\n/**\r\n * scrubber for pokemon names which will fix the api errors for namings\r\n * @param pokemonName The name of the pokemon given by the api\r\n * @returns The correct name of the pokemon\r\n */\r\nexport function scrubPokemonName(pokemonName: string): string {\r\n  if (pokemonName in PERIOD_IN_NAME) return PERIOD_IN_NAME[pokemonName];\r\n  if (pokemonName in GENDER_IN_NAME) return GENDER_IN_NAME[pokemonName];\r\n  if (pokemonName in APOSTAPHE_IN_NAME) return APOSTAPHE_IN_NAME[pokemonName];\r\n  if (pokemonName in DIACRITIC_IN_NAME) return DIACRITIC_IN_NAME[pokemonName];\r\n  if (pokemonName in COLON_IN_NAME) return COLON_IN_NAME[pokemonName];\r\n  if (pokemonName.includes(\"-\") &&\r\n    !HYPHEN_IN_NAME.find(element => element === pokemonName)) {\r\n      return pokemonNameCapitalizer(pokemonName.split(\"-\")[0]);\r\n    }\r\n  else if (pokemonName.includes(\"-\") &&\r\n    HYPHEN_IN_NAME.find(element => element === pokemonName)) {\r\n      return pokemonNameCapitalizer(pokemonName, true);\r\n    }\r\n  return pokemonNameCapitalizer(pokemonName);\r\n};\r\n\r\n/**\r\n * Helper function to capitalize Pokemon names\r\n * Note: Export if needed outside this function\r\n * @param pokemonName Name of the pokemon\r\n * @param hyphen whether a hyphen exists as to capitalize the first \r\n * letter following the hyphen\r\n * @returns the pokemon name with proper capitalizations\r\n */\r\nfunction pokemonNameCapitalizer(pokemonName: string, hyphen?: boolean): string {\r\n  if (!hyphen) {\r\n    return pokemonName.charAt(0).toUpperCase() + pokemonName.slice(1);\r\n  }\r\n  else {\r\n    let name:string[] = pokemonName.split(\"-\");\r\n    return name[0].charAt(0).toUpperCase() + name[0].slice(1) + \"-\" +\r\n      name[1].charAt(0).toUpperCase() + name[1].slice(1)\r\n  }\r\n}","import React, { Component } from \"react\";\r\nimport \"./App.css\";\r\nimport \"./components/PokemonSearch/PokemonSearchResults\";\r\nimport PokemonSearchResults from \"./components/PokemonSearch/PokemonSearchResults\";\r\nimport SearchBox from \"./components/SearchBar/SearchBar\";\r\nimport PokemonDisplay from \"./components/PokemonDisplay/PokemonDisplay\";\r\nimport { PokemonService } from \"./services/PokemonService\";\r\nimport PokemonDTO from \"./DataTransferObjects/PokemonDTO\";\r\nimport { scrubPokemonName } from \"./utils/NameScrubbingHelper\";\r\n\r\ntype AppState = {\r\n  pokemonList: PokemonDTO[];\r\n  pokemonName: string;\r\n  searchfield: string;\r\n  pokemonSelected: string;\r\n  pokemonUrl: string;\r\n};\r\n\r\nclass App extends Component<any, AppState> {\r\n  private pokeService: PokemonService;\r\n\r\n  constructor(props: any) {\r\n    super(props);\r\n    this.state = {\r\n      pokemonList: [],\r\n      pokemonName: \"\",\r\n      searchfield: \"\",\r\n      pokemonSelected: \"\",\r\n      pokemonUrl: \"\",\r\n    };\r\n\r\n    this.pokeService = new PokemonService();\r\n  }\r\n\r\n  //Fetch all of the pokemon to start, no need to paginate\r\n  componentDidMount() {\r\n    this.pokeService\r\n      .getAllPokemon()\r\n      .then((pokemonRetrieved) => {\r\n        pokemonRetrieved.map((pokemon: {name: string, url: string})  => {\r\n          return pokemon.name \r\n            = scrubPokemonName(pokemon.name.toLowerCase());\r\n        });\r\n        this.setState({ pokemonList: pokemonRetrieved });\r\n      })\r\n      .catch(console.log);\r\n  }\r\n\r\n  onSearchChange = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n    if (event && event.target && event.target.value) {\r\n      this.setState({ searchfield: event.target.value });\r\n    }\r\n  };\r\n\r\n  onPokemonSelected = (pokemonClicked: string, url: string) => {\r\n    if (url && url !== \"\") {\r\n      this.setState({ pokemonSelected: pokemonClicked, pokemonUrl: url });\r\n    }\r\n  };\r\n\r\n  render() {\r\n    const { pokemonList, searchfield, pokemonUrl } = this.state;\r\n    let filteredPokemon: any[] = [];\r\n    if (searchfield.length < 2) {\r\n      //do nothing, only really want to start searching when we have at least 2 characters\r\n    } else {\r\n      filteredPokemon = pokemonList.filter((pokemon) => {\r\n        let name: string = pokemon.name.toLowerCase();\r\n        return name.includes(searchfield.toLowerCase());\r\n      });\r\n    }\r\n    return (\r\n      <div className=\"App\">\r\n        <h1>Search for a Pokemon</h1>\r\n        <SearchBox searchChange={this.onSearchChange} />\r\n        <PokemonSearchResults\r\n          onPokemonSelected={this.onPokemonSelected}\r\n          pokemonQuery={filteredPokemon}\r\n        />\r\n        <PokemonDisplay\r\n          getPokemonData={this.pokeService.getPokemon}\r\n          pokemonUrl={pokemonUrl}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n//export default PokemonFetcher;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === \"localhost\" ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === \"[::1]\" ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener(\"load\", () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            \"This web app is being served cache-first by a service \" +\r\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then((registration) => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === \"installed\") {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                \"New content is available and will be used when all \" +\r\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log(\"Content is cached for offline use.\");\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch((error) => {\r\n      console.error(\"Error during service worker registration:\", error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { \"Service-Worker\": \"script\" },\r\n  })\r\n    .then((response) => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get(\"content-type\");\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then((registration) => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        \"No internet connection found. App is running in offline mode.\"\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if (\"serviceWorker\" in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then((registration) => {\r\n        registration.unregister();\r\n      })\r\n      .catch((error) => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}